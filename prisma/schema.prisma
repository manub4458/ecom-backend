generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Store {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  userId              String               @db.ObjectId
  billboards          BillBoard[]          @relation("StoreToBillboard")
  categories          Category[]           @relation("StoreToCategory")
  subCategories       SubCategory[]        @relation("StoreToSubCategory")
  sizes               Size[]               @relation("StoreToSize")
  colors              Color[]              @relation("StoreToColor")
  products            Product[]            @relation("StoreToProduct")
  orders              Order[]              @relation("StoreToOrder")
  specificationGroups SpecificationGroup[] @relation("StoreToSpecificationGroup")
  specificationFields SpecificationField[] @relation("StoreToSpecificationField")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model SpecificationGroup {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  storeId             String               @db.ObjectId
  store               Store                @relation("StoreToSpecificationGroup", fields: [storeId], references: [id], onDelete: Cascade)
  name                String
  specificationFields SpecificationField[] @relation("GroupToSpecificationField")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([storeId])
}

model SpecificationField {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  storeId               String                 @db.ObjectId
  store                 Store                  @relation("StoreToSpecificationField", fields: [storeId], references: [id], onDelete: Cascade)
  groupId               String                 @db.ObjectId
  group                 SpecificationGroup     @relation("GroupToSpecificationField", fields: [groupId], references: [id], onDelete: Cascade)
  name                  String
  productSpecifications ProductSpecification[] @relation("FieldToProductSpecification")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@index([storeId, groupId])
}

model ProductSpecification {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  productId            String             @db.ObjectId
  product              Product            @relation("ProductToProductSpecification", fields: [productId], references: [id], onDelete: Cascade)
  specificationFieldId String             @db.ObjectId
  specificationField   SpecificationField @relation("FieldToProductSpecification", fields: [specificationFieldId], references: [id], onDelete: Cascade)
  value                String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([productId, specificationFieldId])
}

model BillBoard {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId       String        @db.ObjectId
  store         Store         @relation("StoreToBillboard", fields: [storeId], references: [id], onDelete: Cascade)
  label         String
  imageUrl      String
  categories    Category[]    @relation("BillboardToCategory")
  subCategories SubCategory[] @relation("BillboardToSubCategory")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([storeId])
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId       String        @db.ObjectId
  store         Store         @relation("StoreToCategory", fields: [storeId], references: [id], onDelete: Cascade)
  billboardId   String        @db.ObjectId
  billboard     BillBoard     @relation("BillboardToCategory", fields: [billboardId], references: [id], onDelete: Cascade)
  products      Product[]     @relation("CategoryToProduct")
  subCategories SubCategory[] @relation("CategoryToSubCategory")
  name          String
  slug          String        @unique
  bannerImage   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([storeId, billboardId])
}

model SubCategory {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  storeId            String        @db.ObjectId
  store              Store         @relation("StoreToSubCategory", fields: [storeId], references: [id], onDelete: Cascade)
  billboardId        String        @db.ObjectId
  billboard          BillBoard     @relation("BillboardToSubCategory", fields: [billboardId], references: [id], onDelete: Cascade)
  categoryId         String        @db.ObjectId
  category           Category      @relation("CategoryToSubCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  parentId           String?       @db.ObjectId
  parent             SubCategory?  @relation("SubCategoryToChildSubCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childSubCategories SubCategory[] @relation("SubCategoryToChildSubCategory")
  products           Product[]     @relation("SubCategoryToProduct")
  slug               String        @unique
  name               String
  bannerImage        String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([storeId, billboardId, categoryId, parentId])
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id], onDelete: Cascade)
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id], onDelete: Cascade)
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@index([storeId])
}

model Product {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  storeId               String                 @db.ObjectId
  store                 Store                  @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)
  categoryId            String?                @db.ObjectId
  category              Category?              @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: Restrict)
  subCategoryId         String?                @db.ObjectId
  subCategory           SubCategory?           @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name                  String
  slug                  String                 @unique
  price                 Int
  about                 String
  description           String
  sizeAndFit            String[]
  materialAndCare       String[]
  enabledFeatures       String[]               @default([])
  isFeatured            Boolean                @default(false)
  isArchieved           Boolean                @default(false)
  stock                 Int                    @default(0)
  sizeId                String?                @db.ObjectId
  size                  Size?                  @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  colorId               String?                @db.ObjectId
  color                 Color?                 @relation(fields: [colorId], references: [id], onDelete: SetNull)
  productImages         ProductImage[]
  productSpecifications ProductSpecification[] @relation("ProductToProductSpecification")
  orderItems            OrderItem[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@index([sizeId, colorId, categoryId, subCategoryId, storeId])
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  quantity  Int      @default(1)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId, productId])
}
